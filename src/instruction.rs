/// Instruction
#[derive(Debug)]
pub struct Instruction {
    /// Opecode
    pub opc: OpecodeKind,
    /// Register Destination
    pub rd: Option<usize>,
    /// Register Source 1
    pub rs1: Option<usize>,
    /// Register Source 2
    pub rs2: Option<usize>,
    /// Immediate
    pub imm: Option<i32>,
    /// Instruction extension
    pub extension: Extensions,
    /// Instruction format
    pub inst_format: InstFormat,
}

/// RISC-V extensions
#[derive(Debug)]
pub enum Extensions {
    /// Base Integer Instruction Set
    BaseI,
    /// Integer Multiplication and Division
    M,
    /// Atomic Instructions
    A,
    /// Compressed Instructions
    C,
    /// Control and Status Register Instructions
    Zicsr,
    /// Privileged Instructions
    Priv,
}

/// Instruction format
#[derive(Debug)]
pub enum InstFormat {
    /// Regular format
    Rtype,
    /// Immediate format
    Itype,
    /// Store format
    Stype,
    /// Branch format
    Btype,
    /// Upper immediate format
    Utype,
    /// Jump format
    Jtype,
    /// Compressed instruction
    /// C-type may possibly be further divided (Q0, Q1, Q2...).
    Ctype,
    /// Uncategorized format
    Uncategorized,
}

#[derive(Debug)]
pub enum OpecodeKind {
    //== Base Integer Instruction ==
    LUI,
    AUIPC,
    JAL,
    JALR,
    BEQ,
    BNE,
    BLT,
    BGE,
    BLTU,
    BGEU,
    LB,
    LH,
    LW,
    LBU,
    LHU,
    SB,
    SH,
    SW,
    ADDI,
    SLTI,
    SLTIU,
    XORI,
    ORI,
    ANDI,
    SLLI,
    SRLI,
    SRAI,
    ADD,
    SUB,
    SLL,
    SLT,
    SLTU,
    XOR,
    SRL,
    SRA,
    OR,
    AND,
    FENCE,
    ECALL,
    EBREAK,
    //-- rv64 --
    LWU,
    LD,
    SD,
    ADDIW,
    SLLIW,
    SRLIW,
    SRAIW,
    ADDW,
    SUBW,
    SLLW,
    SRLW,
    SRAW,

    //== Zicsr Extension ==
    CSRRW,
    CSRRS,
    CSRRC,
    CSRRWI,
    CSRRSI,
    CSRRCI,

    //== privileged Instruction ==
    SRET,
    MRET,
    WFI,
    SFENCE_VMA,

    //== M Extension ==
    MUL,
    MULH,
    MULHSU,
    MULHU,
    DIV,
    DIVU,
    REM,
    REMU,
    //-- rv64 --
    MULW,
    DIVW,
    DIVUW,
    REMW,
    REMUW,

    //== A Extension ==
    LR_W,
    SC_W,
    AMOSWAP_W,
    AMOADD_W,
    AMOXOR_W,
    AMOAND_W,
    AMOOR_W,
    AMOMIN_W,
    AMOMAX_W,
    AMOMINU_W,
    AMOMAXU_W,
    //-- rv64 --
    LR_D,
    SC_D,
    AMOSWAP_D,
    AMOADD_D,
    AMOXOR_D,
    AMOAND_D,
    AMOOR_D,
    AMOMIN_D,
    AMOMAX_D,
    AMOMINU_D,
    AMOMAXU_D,

    //== C Extension ==
    C_ADDI4SPN,
    C_LW,
    C_SW,
    C_NOP,
    C_ADDI,
    C_JAL,
    C_LI,
    C_ADDI16SP,
    C_LUI,
    C_SRLI,
    C_SRAI,
    C_ANDI,
    C_SUB,
    C_XOR,
    C_OR,
    C_AND,
    C_J,
    C_BEQZ,
    C_BNEZ,
    C_SLLI,
    C_LWSP,
    C_JR,
    C_MV,
    C_EBREAK,
    C_JALR,
    C_ADD,
    C_SWSP,
    //-- rv64 --
    C_LD,
    C_SD,
    C_ADDIW,
    C_SUBW,
    C_ADDW,
    C_LDSP,
    C_SDSP,
}

impl Instruction {
    pub fn print_myself(&self) {
        println!(
            "{:<8} {:>4},  {:?},  {:?},  {:?}",
            self.opc_to_string(),
            self.rd_to_str(),
            self.rs1,
            self.rs2,
            self.imm
        );
    }

    fn rd_to_str(&self) -> &'static str {
        if let Some(rd_val) = self.rd {
            reg2str(rd_val)
        } else {
            "--"
        }
    }

    pub fn opc_to_extension(&self) -> Extensions {
        match self.opc {
            OpecodeKind::LUI => Extensions::BaseI,
            OpecodeKind::AUIPC => Extensions::BaseI,
            OpecodeKind::JAL => Extensions::BaseI,
            OpecodeKind::JALR => Extensions::BaseI,
            OpecodeKind::BEQ => Extensions::BaseI,
            OpecodeKind::BNE => Extensions::BaseI,
            OpecodeKind::BLT => Extensions::BaseI,
            OpecodeKind::BGE => Extensions::BaseI,
            OpecodeKind::BLTU => Extensions::BaseI,
            OpecodeKind::BGEU => Extensions::BaseI,
            OpecodeKind::LB => Extensions::BaseI,
            OpecodeKind::LH => Extensions::BaseI,
            OpecodeKind::LW => Extensions::BaseI,
            OpecodeKind::LBU => Extensions::BaseI,
            OpecodeKind::LHU => Extensions::BaseI,
            OpecodeKind::SB => Extensions::BaseI,
            OpecodeKind::SH => Extensions::BaseI,
            OpecodeKind::SW => Extensions::BaseI,
            OpecodeKind::ADDI => Extensions::BaseI,
            OpecodeKind::SLTI => Extensions::BaseI,
            OpecodeKind::SLTIU => Extensions::BaseI,
            OpecodeKind::XORI => Extensions::BaseI,
            OpecodeKind::ORI => Extensions::BaseI,
            OpecodeKind::ANDI => Extensions::BaseI,
            OpecodeKind::SLLI => Extensions::BaseI,
            OpecodeKind::SRLI => Extensions::BaseI,
            OpecodeKind::SRAI => Extensions::BaseI,
            OpecodeKind::ADD => Extensions::BaseI,
            OpecodeKind::SUB => Extensions::BaseI,
            OpecodeKind::SLL => Extensions::BaseI,
            OpecodeKind::SLT => Extensions::BaseI,
            OpecodeKind::SLTU => Extensions::BaseI,
            OpecodeKind::XOR => Extensions::BaseI,
            OpecodeKind::SRL => Extensions::BaseI,
            OpecodeKind::SRA => Extensions::BaseI,
            OpecodeKind::OR => Extensions::BaseI,
            OpecodeKind::AND => Extensions::BaseI,
            OpecodeKind::FENCE => Extensions::BaseI,
            OpecodeKind::ECALL => Extensions::BaseI,
            OpecodeKind::EBREAK => Extensions::BaseI,
            OpecodeKind::LWU => Extensions::BaseI,
            OpecodeKind::LD => Extensions::BaseI,
            OpecodeKind::SD => Extensions::BaseI,
            OpecodeKind::ADDIW => Extensions::BaseI,
            OpecodeKind::SLLIW => Extensions::BaseI,
            OpecodeKind::SRLIW => Extensions::BaseI,
            OpecodeKind::SRAIW => Extensions::BaseI,
            OpecodeKind::ADDW => Extensions::BaseI,
            OpecodeKind::SUBW => Extensions::BaseI,
            OpecodeKind::SLLW => Extensions::BaseI,
            OpecodeKind::SRLW => Extensions::BaseI,
            OpecodeKind::SRAW => Extensions::BaseI,
            OpecodeKind::CSRRW => Extensions::Zicsr,
            OpecodeKind::CSRRS => Extensions::Zicsr,
            OpecodeKind::CSRRC => Extensions::Zicsr,
            OpecodeKind::CSRRWI => Extensions::Zicsr,
            OpecodeKind::CSRRSI => Extensions::Zicsr,
            OpecodeKind::CSRRCI => Extensions::Zicsr,
            OpecodeKind::SRET => Extensions::Priv,
            OpecodeKind::MRET => Extensions::Priv,
            OpecodeKind::WFI => Extensions::Priv,
            OpecodeKind::SFENCE_VMA => Extensions::Priv,
            OpecodeKind::MUL => Extensions::M,
            OpecodeKind::MULH => Extensions::M,
            OpecodeKind::MULHSU => Extensions::M,
            OpecodeKind::MULHU => Extensions::M,
            OpecodeKind::DIV => Extensions::M,
            OpecodeKind::DIVU => Extensions::M,
            OpecodeKind::REM => Extensions::M,
            OpecodeKind::REMU => Extensions::M,
            OpecodeKind::MULW => Extensions::M,
            OpecodeKind::DIVW => Extensions::M,
            OpecodeKind::DIVUW => Extensions::M,
            OpecodeKind::REMW => Extensions::M,
            OpecodeKind::REMUW => Extensions::M,
            OpecodeKind::LR_W => Extensions::A,
            OpecodeKind::SC_W => Extensions::A,
            OpecodeKind::AMOSWAP_W => Extensions::A,
            OpecodeKind::AMOADD_W => Extensions::A,
            OpecodeKind::AMOXOR_W => Extensions::A,
            OpecodeKind::AMOAND_W => Extensions::A,
            OpecodeKind::AMOOR_W => Extensions::A,
            OpecodeKind::AMOMIN_W => Extensions::A,
            OpecodeKind::AMOMAX_W => Extensions::A,
            OpecodeKind::AMOMINU_W => Extensions::A,
            OpecodeKind::AMOMAXU_W => Extensions::A,
            OpecodeKind::LR_D => Extensions::A,
            OpecodeKind::SC_D => Extensions::A,
            OpecodeKind::AMOSWAP_D => Extensions::A,
            OpecodeKind::AMOADD_D => Extensions::A,
            OpecodeKind::AMOXOR_D => Extensions::A,
            OpecodeKind::AMOAND_D => Extensions::A,
            OpecodeKind::AMOOR_D => Extensions::A,
            OpecodeKind::AMOMIN_D => Extensions::A,
            OpecodeKind::AMOMAX_D => Extensions::A,
            OpecodeKind::AMOMINU_D => Extensions::A,
            OpecodeKind::AMOMAXU_D => Extensions::A,
            OpecodeKind::C_ADDI4SPN => Extensions::C,
            OpecodeKind::C_LW => Extensions::C,
            OpecodeKind::C_SW => Extensions::C,
            OpecodeKind::C_NOP => Extensions::C,
            OpecodeKind::C_ADDI => Extensions::C,
            OpecodeKind::C_JAL => Extensions::C,
            OpecodeKind::C_LI => Extensions::C,
            OpecodeKind::C_ADDI16SP => Extensions::C,
            OpecodeKind::C_LUI => Extensions::C,
            OpecodeKind::C_SRLI => Extensions::C,
            OpecodeKind::C_SRAI => Extensions::C,
            OpecodeKind::C_ANDI => Extensions::C,
            OpecodeKind::C_SUB => Extensions::C,
            OpecodeKind::C_XOR => Extensions::C,
            OpecodeKind::C_OR => Extensions::C,
            OpecodeKind::C_AND => Extensions::C,
            OpecodeKind::C_J => Extensions::C,
            OpecodeKind::C_BEQZ => Extensions::C,
            OpecodeKind::C_BNEZ => Extensions::C,
            OpecodeKind::C_SLLI => Extensions::C,
            OpecodeKind::C_LWSP => Extensions::C,
            OpecodeKind::C_JR => Extensions::C,
            OpecodeKind::C_MV => Extensions::C,
            OpecodeKind::C_EBREAK => Extensions::C,
            OpecodeKind::C_JALR => Extensions::C,
            OpecodeKind::C_ADD => Extensions::C,
            OpecodeKind::C_SWSP => Extensions::C,
            OpecodeKind::C_LD => Extensions::C,
            OpecodeKind::C_SD => Extensions::C,
            OpecodeKind::C_ADDIW => Extensions::C,
            OpecodeKind::C_SUBW => Extensions::C,
            OpecodeKind::C_ADDW => Extensions::C,
            OpecodeKind::C_LDSP => Extensions::C,
            OpecodeKind::C_SDSP => Extensions::C,
        }
    }

    pub fn opc_to_string(&self) -> &'static str {
        match self.opc {
            OpecodeKind::LUI => "lui",
            OpecodeKind::AUIPC => "auipc",
            OpecodeKind::JAL => "jal",
            OpecodeKind::JALR => "jalr",
            OpecodeKind::BEQ => "beq",
            OpecodeKind::BNE => "bne",
            OpecodeKind::BLT => "blt",
            OpecodeKind::BGE => "bge",
            OpecodeKind::BLTU => "bltu",
            OpecodeKind::BGEU => "bgeu",
            OpecodeKind::LB => "lb",
            OpecodeKind::LH => "lh",
            OpecodeKind::LW => "lw",
            OpecodeKind::LBU => "lbu",
            OpecodeKind::LHU => "lhu",
            OpecodeKind::SB => "sb",
            OpecodeKind::SH => "sh",
            OpecodeKind::SW => "sw",
            OpecodeKind::ADDI => "addi",
            OpecodeKind::SLTI => "slti",
            OpecodeKind::SLTIU => "sltiu",
            OpecodeKind::XORI => "xori",
            OpecodeKind::ORI => "ori",
            OpecodeKind::ANDI => "andi",
            OpecodeKind::SLLI => "slli",
            OpecodeKind::SRLI => "srli",
            OpecodeKind::SRAI => "srai",
            OpecodeKind::ADD => "add",
            OpecodeKind::SUB => "sub",
            OpecodeKind::SLL => "sll",
            OpecodeKind::SLT => "slt",
            OpecodeKind::SLTU => "sltu",
            OpecodeKind::XOR => "xor",
            OpecodeKind::SRL => "srl",
            OpecodeKind::SRA => "sra",
            OpecodeKind::OR => "or",
            OpecodeKind::AND => "and",
            OpecodeKind::FENCE => "fence",
            OpecodeKind::ECALL => "ecall",
            OpecodeKind::EBREAK => "ebreak",
            OpecodeKind::LWU => "lwu",
            OpecodeKind::LD => "ld",
            OpecodeKind::SD => "sd",
            OpecodeKind::ADDIW => "addiw",
            OpecodeKind::SLLIW => "slliw",
            OpecodeKind::SRLIW => "srliw",
            OpecodeKind::SRAIW => "sraiw",
            OpecodeKind::ADDW => "addw",
            OpecodeKind::SUBW => "subw",
            OpecodeKind::SLLW => "sllw",
            OpecodeKind::SRLW => "srlw",
            OpecodeKind::SRAW => "sraw",
            OpecodeKind::CSRRW => "csrrw",
            OpecodeKind::CSRRS => "csrrs",
            OpecodeKind::CSRRC => "csrrc",
            OpecodeKind::CSRRWI => "csrrwi",
            OpecodeKind::CSRRSI => "csrrsi",
            OpecodeKind::CSRRCI => "csrrci",
            OpecodeKind::SRET => "sret",
            OpecodeKind::MRET => "mret",
            OpecodeKind::WFI => "wfi",
            OpecodeKind::SFENCE_VMA => "sfence.vma",
            OpecodeKind::MUL => "mul",
            OpecodeKind::MULH => "mulh",
            OpecodeKind::MULHSU => "mulhsu,",
            OpecodeKind::MULHU => "mulhu",
            OpecodeKind::DIV => "div",
            OpecodeKind::DIVU => "divu",
            OpecodeKind::REM => "rem",
            OpecodeKind::REMU => "remu",
            OpecodeKind::MULW => "mulw",
            OpecodeKind::DIVW => "divw",
            OpecodeKind::DIVUW => "divuw",
            OpecodeKind::REMW => "remw",
            OpecodeKind::REMUW => "remuw",
            OpecodeKind::LR_W => "lr.w",
            OpecodeKind::SC_W => "sc.w",
            OpecodeKind::AMOSWAP_W => "amoswap.w",
            OpecodeKind::AMOADD_W => "amoadd.w",
            OpecodeKind::AMOXOR_W => "amoxor.w",
            OpecodeKind::AMOAND_W => "amoand.w",
            OpecodeKind::AMOOR_W => "amoor.w",
            OpecodeKind::AMOMIN_W => "amomin.w",
            OpecodeKind::AMOMAX_W => "amomax.w",
            OpecodeKind::AMOMINU_W => "amominu.w",
            OpecodeKind::AMOMAXU_W => "amomaxu.w",
            OpecodeKind::LR_D => "lr.d",
            OpecodeKind::SC_D => "sc.d",
            OpecodeKind::AMOSWAP_D => "amoswap.d",
            OpecodeKind::AMOADD_D => "amoadd.d",
            OpecodeKind::AMOXOR_D => "amoxor.d",
            OpecodeKind::AMOAND_D => "amoand.d",
            OpecodeKind::AMOOR_D => "amoor.d",
            OpecodeKind::AMOMIN_D => "amomin.d",
            OpecodeKind::AMOMAX_D => "amomax.d",
            OpecodeKind::AMOMINU_D => "amominu.d",
            OpecodeKind::AMOMAXU_D => "amomaxu.d",
            OpecodeKind::C_ADDI4SPN => "C.addi4spn",
            OpecodeKind::C_LW => "C.lw",
            OpecodeKind::C_SW => "C.sw",
            OpecodeKind::C_NOP => "C.nop",
            OpecodeKind::C_ADDI => "C.addi",
            OpecodeKind::C_JAL => "C.jal",
            OpecodeKind::C_LI => "C.li",
            OpecodeKind::C_ADDI16SP => "C.addi16sp",
            OpecodeKind::C_LUI => "C.lui",
            OpecodeKind::C_SRLI => "C.srli",
            OpecodeKind::C_SRAI => "C.srai",
            OpecodeKind::C_ANDI => "C.andi",
            OpecodeKind::C_SUB => "C.sub",
            OpecodeKind::C_XOR => "C.xor",
            OpecodeKind::C_OR => "C.or",
            OpecodeKind::C_AND => "C.and",
            OpecodeKind::C_J => "C.j",
            OpecodeKind::C_BEQZ => "C.beqz",
            OpecodeKind::C_BNEZ => "C.bnez",
            OpecodeKind::C_SLLI => "C.slli",
            OpecodeKind::C_LWSP => "C.lwsp",
            OpecodeKind::C_JR => "C.jr",
            OpecodeKind::C_MV => "C.mv",
            OpecodeKind::C_EBREAK => "C.ebreak",
            OpecodeKind::C_JALR => "C.jalr",
            OpecodeKind::C_ADD => "C.add",
            OpecodeKind::C_SWSP => "C.swsp",
            OpecodeKind::C_LD => "C.ld",
            OpecodeKind::C_SD => "C.sd",
            OpecodeKind::C_ADDIW => "C.addiw",
            OpecodeKind::C_SUBW => "C.subw",
            OpecodeKind::C_ADDW => "C.addw",
            OpecodeKind::C_LDSP => "C.ldsp",
            OpecodeKind::C_SDSP => "C.sdsp",
        }
    }
}

pub fn reg2str(rd_value: usize) -> &'static str {
    match rd_value {
        0 => "zero",
        1 => "ra",
        2 => "sp",
        3 => "gp",
        4 => "tp",
        5 => "t0",
        6 => "t1",
        7 => "t2",
        8 => "s0", // fp
        9 => "s1",
        10 => "a0",
        11 => "a1",
        12 => "a2",
        13 => "a3",
        14 => "a4",
        15 => "a5",
        16 => "a6",
        17 => "a7",
        18 => "s2",
        19 => "s3",
        20 => "s4",
        21 => "s5",
        22 => "s6",
        23 => "s7",
        24 => "s8",
        25 => "s9",
        26 => "s10",
        27 => "s11",
        28 => "t3",
        29 => "t4",
        30 => "t5",
        31 => "t6",
        _ => panic!("unknown register"),
    }
}
